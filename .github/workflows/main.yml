name: Terraform CI/CD Pipeline

on:
  pull_request:
    paths:
      - "environment/prod/**"
      - "environment/qa/**"
      - "infrastructure"

jobs:
  terraform:
    name: Terraform Init/Plan/Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terrafrom
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine Changed Environment
        id: changed-environment
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref}}

          if git diff --name-only origin/${{ github.event.pull_request.base.ref}} | grep -q '^environment/prod/'; then
            echo "environment=prod" >> $GITHUB_ENV
          elif git diff --name-only origin/${{ github.event.pull_request.base.ref}} | grep -q '^environment/qa/'; then
            echo "environment=qa" >> $GITHUB_ENV
          elif git diff --name-only origin/${{ github.event.pull_request.base.ref}} | grep -q '^infrastructure'; then
            echo "environment=infrastructure" >> $GITHUB_ENV
          else
            echo "No relevant environment changes detected"
            exit 1
          fi

      - name: Setting Working Directory for Environment
        id: set-dir
        run: |
          if [ "${{ steps.changed-environment.outputs.environment }}" = "infrastructure" ]; then
            echo "working_directory=infrastructure" >> $GITHUB_ENV
          else
            echo "working_directory=environment/${{ steps.changed-environment.outputs.environment }}" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ steps.set-dir.outputs.working_directory }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ steps.set-dir.outputs.working_directory }}

      - name: Terraform Apply
        if: github.event.pull_request.merged == true
        run: terraform apply -auto-approve
        working-directory: ${{ steps.set-dir.outputs.working_directory }}
